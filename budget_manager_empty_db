-- MySQL dump 10.13  Distrib 8.0.19, for Win64 (x86_64)
--
-- Host: localhost    Database: empty_db
-- ------------------------------------------------------
-- Server version	5.5.5-10.4.11-MariaDB

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `banks`
--

DROP TABLE IF EXISTS `banks`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `banks` (
  `bankID` int(10) NOT NULL AUTO_INCREMENT,
  `bankName` varchar(50) NOT NULL,
  PRIMARY KEY (`bankID`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `banks`
--

LOCK TABLES `banks` WRITE;
/*!40000 ALTER TABLE `banks` DISABLE KEYS */;
INSERT INTO `banks` VALUES (1,'Banca Transilvania'),(2,'Banca Comerciala Romana'),(3,'BRD Group Societe Generale'),(4,'ING'),(5,'CEC Bank'),(6,'NO_BANK');
/*!40000 ALTER TABLE `banks` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `budget_plans`
--

DROP TABLE IF EXISTS `budget_plans`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `budget_plans` (
  `planID` int(10) NOT NULL AUTO_INCREMENT,
  `user_ID` int(10) NOT NULL,
  `planName` varchar(50) NOT NULL,
  `expenseLimit` int(2) NOT NULL,
  `debtLimit` int(2) NOT NULL,
  `savingLimit` int(2) NOT NULL,
  `planType` int(10) NOT NULL,
  `hasAlarm` tinyint(1) NOT NULL,
  `thresholdPercentage` int(2) NOT NULL,
  `startDate` date NOT NULL,
  `endDate` date NOT NULL,
  PRIMARY KEY (`planID`),
  UNIQUE KEY `planName` (`planName`),
  KEY `user_ID` (`user_ID`),
  KEY `planType` (`planType`),
  CONSTRAINT `budget_plans_ibfk_1` FOREIGN KEY (`user_ID`) REFERENCES `users` (`userID`),
  CONSTRAINT `budget_plans_ibfk_2` FOREIGN KEY (`planType`) REFERENCES `plan_types` (`typeID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `budget_plans`
--

LOCK TABLES `budget_plans` WRITE;
/*!40000 ALTER TABLE `budget_plans` DISABLE KEYS */;
/*!40000 ALTER TABLE `budget_plans` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `creditors`
--

DROP TABLE IF EXISTS `creditors`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `creditors` (
  `creditorID` int(10) NOT NULL AUTO_INCREMENT,
  `creditorName` varchar(50) NOT NULL,
  PRIMARY KEY (`creditorID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `creditors`
--

LOCK TABLES `creditors` WRITE;
/*!40000 ALTER TABLE `creditors` DISABLE KEYS */;
/*!40000 ALTER TABLE `creditors` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `currencies`
--

DROP TABLE IF EXISTS `currencies`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `currencies` (
  `currencyID` int(10) NOT NULL AUTO_INCREMENT,
  `currencyName` varchar(3) NOT NULL,
  PRIMARY KEY (`currencyID`),
  UNIQUE KEY `currencyName` (`currencyName`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `currencies`
--

LOCK TABLES `currencies` WRITE;
/*!40000 ALTER TABLE `currencies` DISABLE KEYS */;
INSERT INTO `currencies` VALUES (5,'CHF'),(2,'EUR'),(4,'GBP'),(1,'RON'),(3,'USD');
/*!40000 ALTER TABLE `currencies` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `debtors`
--

DROP TABLE IF EXISTS `debtors`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `debtors` (
  `debtorID` int(10) NOT NULL AUTO_INCREMENT,
  `debtorName` varchar(30) NOT NULL,
  PRIMARY KEY (`debtorID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `debtors`
--

LOCK TABLES `debtors` WRITE;
/*!40000 ALTER TABLE `debtors` DISABLE KEYS */;
/*!40000 ALTER TABLE `debtors` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `debts`
--

DROP TABLE IF EXISTS `debts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `debts` (
  `debtID` int(10) NOT NULL AUTO_INCREMENT,
  `user_ID` int(10) NOT NULL,
  `name` varchar(50) NOT NULL,
  `value` int(20) NOT NULL,
  `creditor_ID` int(10) NOT NULL,
  `date` date NOT NULL,
  PRIMARY KEY (`debtID`),
  KEY `user_ID` (`user_ID`),
  KEY `creditor_ID` (`creditor_ID`),
  CONSTRAINT `debts_ibfk_1` FOREIGN KEY (`user_ID`) REFERENCES `users` (`userID`),
  CONSTRAINT `debts_ibfk_2` FOREIGN KEY (`creditor_ID`) REFERENCES `creditors` (`creditorID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `debts`
--

LOCK TABLES `debts` WRITE;
/*!40000 ALTER TABLE `debts` DISABLE KEYS */;
/*!40000 ALTER TABLE `debts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `expense_types`
--

DROP TABLE IF EXISTS `expense_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `expense_types` (
  `categoryID` int(10) NOT NULL AUTO_INCREMENT,
  `categoryName` varchar(30) NOT NULL,
  PRIMARY KEY (`categoryID`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `expense_types`
--

LOCK TABLES `expense_types` WRITE;
/*!40000 ALTER TABLE `expense_types` DISABLE KEYS */;
INSERT INTO `expense_types` VALUES (4,'Utilities'),(5,'Education'),(6,'Sport'),(7,'Food'),(8,'Transport'),(9,'Housing'),(10,'Household items'),(11,'Insurance'),(12,'Healthcare'),(13,'Gifts/donations'),(14,'Entertainment'),(15,'Clothing'),(16,'Personal care'),(17,'Others'),(18,'IT&C'),(19,'Footwear'),(20,'Hobbies'),(21,'Travelling');
/*!40000 ALTER TABLE `expense_types` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `expenses`
--

DROP TABLE IF EXISTS `expenses`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `expenses` (
  `expenseID` int(10) NOT NULL AUTO_INCREMENT,
  `user_ID` int(10) NOT NULL,
  `name` varchar(50) NOT NULL,
  `type` int(10) NOT NULL,
  `value` int(20) NOT NULL,
  `date` date NOT NULL,
  PRIMARY KEY (`expenseID`),
  KEY `type` (`type`),
  KEY `user_ID` (`user_ID`),
  CONSTRAINT `expenses_ibfk_1` FOREIGN KEY (`type`) REFERENCES `expense_types` (`categoryID`),
  CONSTRAINT `expenses_ibfk_2` FOREIGN KEY (`user_ID`) REFERENCES `users` (`userID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `expenses`
--

LOCK TABLES `expenses` WRITE;
/*!40000 ALTER TABLE `expenses` DISABLE KEYS */;
/*!40000 ALTER TABLE `expenses` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `external_accounts_balance`
--

DROP TABLE IF EXISTS `external_accounts_balance`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `external_accounts_balance` (
  `recordID` int(20) NOT NULL AUTO_INCREMENT,
  `account_ID` int(20) NOT NULL,
  `recordName` varchar(50) DEFAULT NULL,
  `value` double DEFAULT NULL,
  `createdDate` date DEFAULT NULL,
  `lastUpdatedDate` date DEFAULT NULL,
  PRIMARY KEY (`recordID`),
  KEY `external_accounts_balance_ibfk_2` (`account_ID`),
  CONSTRAINT `external_accounts_balance_ibfk_2` FOREIGN KEY (`account_ID`) REFERENCES `saving_accounts` (`accountID`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `external_accounts_balance`
--

LOCK TABLES `external_accounts_balance` WRITE;
/*!40000 ALTER TABLE `external_accounts_balance` DISABLE KEYS */;
/*!40000 ALTER TABLE `external_accounts_balance` ENABLE KEYS */;
UNLOCK TABLES;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_unicode_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `External balance record validation` BEFORE INSERT ON `external_accounts_balance` FOR EACH ROW BEGIN
DECLARE v_exists INT DEFAULT 0;

SELECT COUNT(*)
INTO v_exists
FROM external_accounts_balance
WHERE account_ID = NEW.account_ID
AND MONTH(createdDate) = MONTH(NEW.createdDate)
AND YEAR(createdDate) = YEAR(NEW.createdDate);

IF v_exists >= 1 THEN
SIGNAL SQLSTATE '45000'
SET MESSAGE_TEXT = 'Cannot insert duplicate data! A record already exists for the month/year represented by the creationDate field value.';

END IF;
                                                                                      
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `income_types`
--

DROP TABLE IF EXISTS `income_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `income_types` (
  `typeID` int(10) NOT NULL AUTO_INCREMENT,
  `typeName` varchar(20) NOT NULL,
  PRIMARY KEY (`typeID`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `income_types`
--

LOCK TABLES `income_types` WRITE;
/*!40000 ALTER TABLE `income_types` DISABLE KEYS */;
INSERT INTO `income_types` VALUES (3,'Dividends'),(4,'Other'),(5,'Copyright'),(6,'Salary'),(7,'Rental income'),(8,'Meal tickets refund'),(9,'Goods sale');
/*!40000 ALTER TABLE `income_types` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `incomes`
--

DROP TABLE IF EXISTS `incomes`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `incomes` (
  `incomeID` int(10) NOT NULL AUTO_INCREMENT,
  `user_ID` int(10) NOT NULL,
  `name` varchar(50) NOT NULL,
  `incomeType` int(10) NOT NULL,
  `value` int(20) NOT NULL,
  `date` date NOT NULL,
  PRIMARY KEY (`incomeID`),
  KEY `user_ID` (`user_ID`),
  KEY `incomeType` (`incomeType`),
  CONSTRAINT `incomes_ibfk_1` FOREIGN KEY (`user_ID`) REFERENCES `users` (`userID`),
  CONSTRAINT `incomes_ibfk_2` FOREIGN KEY (`incomeType`) REFERENCES `income_types` (`typeID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `incomes`
--

LOCK TABLES `incomes` WRITE;
/*!40000 ALTER TABLE `incomes` DISABLE KEYS */;
/*!40000 ALTER TABLE `incomes` ENABLE KEYS */;
UNLOCK TABLES;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'IGNORE_SPACE,NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `Balance record creation on income insertion` AFTER
INSERT
	ON
	`incomes` FOR EACH ROW BEGIN
DECLARE v_has_balance_record TINYINT(1) DEFAULT 0;

DECLARE v_insertion_result TINYINT(1) DEFAULT 0;

DECLARE v_user_ID INT DEFAULT 0;

DECLARE v_saving_account_ID INT DEFAULT 0;

DECLARE v_balance_record_name VARCHAR(50) DEFAULT NULL;

DECLARE v_balance_record_month INT DEFAULT 0;

DECLARE v_balance_record_year INT DEFAULT 0;

SET
v_user_ID = NEW.user_ID;


SELECT
	accountID 
INTO
	v_saving_account_ID
FROM
	saving_accounts
WHERE
	user_ID = v_user_ID
	AND type_ID = 1;

SET
v_balance_record_name = CONCAT('balance_record_', CURDATE());

SET
v_balance_record_month = MONTH(NEW.date);

SET
v_balance_record_year = YEAR(NEW.date);

CALL has_balance_record_for_selected_month(v_saving_account_ID,
v_balance_record_month,
v_balance_record_year,
@v_has_balance_record);


SET
v_has_balance_record = @v_has_balance_record;

IF v_has_balance_record = 0 THEN
CALL create_saving_account_balance_record(v_user_ID, v_saving_account_ID, v_balance_record_name, 0, v_balance_record_month, v_balance_record_year, @v_insertion_result);
END IF;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `interest_payment_type`
--

DROP TABLE IF EXISTS `interest_payment_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `interest_payment_type` (
  `typeID` int(20) NOT NULL AUTO_INCREMENT,
  `typeName` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`typeID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `interest_payment_type`
--

LOCK TABLES `interest_payment_type` WRITE;
/*!40000 ALTER TABLE `interest_payment_type` DISABLE KEYS */;
INSERT INTO `interest_payment_type` VALUES (1,'Monthly payment'),(2,'Yearly payment');
/*!40000 ALTER TABLE `interest_payment_type` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `interest_types`
--

DROP TABLE IF EXISTS `interest_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `interest_types` (
  `typeID` int(20) NOT NULL AUTO_INCREMENT,
  `typeName` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`typeID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `interest_types`
--

LOCK TABLES `interest_types` WRITE;
/*!40000 ALTER TABLE `interest_types` DISABLE KEYS */;
INSERT INTO `interest_types` VALUES (1,'Yearly interest'),(2,'Monthly interest');
/*!40000 ALTER TABLE `interest_types` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `partial_payments`
--

DROP TABLE IF EXISTS `partial_payments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `partial_payments` (
  `paymentID` int(20) NOT NULL AUTO_INCREMENT,
  `receivable_ID` int(20) NOT NULL,
  `paymentName` varchar(50) NOT NULL,
  `paymentValue` int(20) NOT NULL,
  `paymentDate` date NOT NULL,
  PRIMARY KEY (`paymentID`),
  KEY `partial_payments_ibfk_1` (`receivable_ID`),
  CONSTRAINT `partial_payments_ibfk_1` FOREIGN KEY (`receivable_ID`) REFERENCES `receivables` (`receivableID`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `partial_payments`
--

LOCK TABLES `partial_payments` WRITE;
/*!40000 ALTER TABLE `partial_payments` DISABLE KEYS */;
/*!40000 ALTER TABLE `partial_payments` ENABLE KEYS */;
UNLOCK TABLES;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'IGNORE_SPACE,NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `Total paid amount update on insert` AFTER
INSERT
	ON
	`partial_payments` FOR EACH ROW BEGIN

DECLARE v_receivable_value INT(20);

DECLARE v_total_paid_amount INT(20);

DECLARE v_new_receivable_status VARCHAR(50);


SELECT
	rc.value,
	SUM(pps.paymentValue)
INTO
	v_receivable_value,
	v_total_paid_amount
FROM
	partial_payments pps
INNER JOIN receivables rc ON
	pps.receivable_ID = rc.receivableID
WHERE
	pps.receivable_ID = NEW.receivable_ID;


CALL get_new_receivable_status(NEW.receivable_ID,
v_new_receivable_status);

UPDATE
	receivables
SET
	totalPaidAmount = v_total_paid_amount,
	status_ID = (
	SELECT
		statusID
	FROM
		receivable_status
	WHERE
		statusDescription = v_new_receivable_status)
WHERE
	receivableID = NEW.receivable_ID;


IF v_total_paid_amount = v_receivable_value THEN
UPDATE
	receivables
SET
	payOffDate = CURDATE()
WHERE
	receivableID = NEW.receivable_ID;
END IF;


END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'IGNORE_SPACE,NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `Total paid amount update on update` AFTER
UPDATE
	ON
	`partial_payments` FOR EACH ROW BEGIN
		
DECLARE v_default_account_ID INT(20);


UPDATE
	receivables
SET
	totalPaidAmount = (
	SELECT
		SUM(paymentValue)
	FROM
		partial_payments
	WHERE
		receivable_ID = NEW.receivable_ID)
WHERE
	receivables.receivableID = NEW.receivable_ID;

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'IGNORE_SPACE,NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `Total paid amount update on delete` AFTER
DELETE
	ON
	`partial_payments` FOR EACH ROW BEGIN

DECLARE v_new_receivable_status VARCHAR(50);

DECLARE v_total_partial_payments INT(20);

DECLARE v_new_receivable_status_ID VARCHAR(50);


CALL get_new_receivable_status(OLD.receivable_ID,
v_new_receivable_status);


SELECT
		SUM(paymentValue)
INTO
		v_total_partial_payments
FROM
		partial_payments
WHERE
		receivable_ID = OLD.receivable_ID;


SELECT
	statusID
INTO
	v_new_receivable_status_ID
FROM
	receivable_status
WHERE
	statusDescription = v_new_receivable_status;


UPDATE
	receivables
SET
	totalPaidAmount = v_total_partial_payments,
	status_ID = v_new_receivable_status_ID
WHERE
	receivables.receivableID = OLD.receivable_ID;

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `plan_types`
--

DROP TABLE IF EXISTS `plan_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `plan_types` (
  `typeID` int(10) NOT NULL AUTO_INCREMENT,
  `typeName` varchar(30) NOT NULL,
  PRIMARY KEY (`typeID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `plan_types`
--

LOCK TABLES `plan_types` WRITE;
/*!40000 ALTER TABLE `plan_types` DISABLE KEYS */;
INSERT INTO `plan_types` VALUES (1,'One month'),(2,'Six months');
/*!40000 ALTER TABLE `plan_types` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `receivable_history`
--

DROP TABLE IF EXISTS `receivable_history`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `receivable_history` (
  `histID` int(20) NOT NULL AUTO_INCREMENT,
  `receivable_ID` int(20) DEFAULT NULL,
  `name` varchar(50) NOT NULL,
  `value` int(20) DEFAULT NULL,
  `totalPaidAmount` int(20) DEFAULT NULL,
  `status` varchar(50) DEFAULT NULL,
  `debtor_ID` int(20) NOT NULL,
  `account_ID` int(20) DEFAULT NULL,
  `createdDate` date NOT NULL,
  `dueDate` date NOT NULL,
  `performedAction` varchar(50) DEFAULT NULL,
  `histTimestamp` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`histID`),
  KEY `receivable_history_ibfk_1` (`receivable_ID`),
  KEY `receivable_history_ibfk_2` (`account_ID`),
  KEY `debtor_ID` (`debtor_ID`),
  CONSTRAINT `receivable_history_ibfk_1` FOREIGN KEY (`receivable_ID`) REFERENCES `receivables` (`receivableID`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `receivable_history_ibfk_2` FOREIGN KEY (`account_ID`) REFERENCES `saving_accounts` (`accountID`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `receivable_history_ibfk_3` FOREIGN KEY (`debtor_ID`) REFERENCES `debtors` (`debtorID`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `receivable_history`
--

LOCK TABLES `receivable_history` WRITE;
/*!40000 ALTER TABLE `receivable_history` DISABLE KEYS */;
/*!40000 ALTER TABLE `receivable_history` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `receivable_status`
--

DROP TABLE IF EXISTS `receivable_status`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `receivable_status` (
  `statusID` int(20) NOT NULL AUTO_INCREMENT,
  `statusDescription` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`statusID`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `receivable_status`
--

LOCK TABLES `receivable_status` WRITE;
/*!40000 ALTER TABLE `receivable_status` DISABLE KEYS */;
INSERT INTO `receivable_status` VALUES (1,'New'),(2,'Partially paid'),(3,'Paid'),(4,'Overdue');
/*!40000 ALTER TABLE `receivable_status` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `receivables`
--

DROP TABLE IF EXISTS `receivables`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `receivables` (
  `receivableID` int(10) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) NOT NULL,
  `value` int(20) NOT NULL,
  `debtor_ID` int(10) DEFAULT NULL,
  `account_ID` int(20) NOT NULL,
  `totalPaidAmount` int(20) NOT NULL,
  `status_ID` int(20) NOT NULL,
  `createdDate` date NOT NULL,
  `dueDate` date NOT NULL,
  `payOffDate` date DEFAULT NULL,
  PRIMARY KEY (`receivableID`),
  KEY `debtor_ID` (`debtor_ID`),
  KEY `account_ID` (`account_ID`),
  KEY `status_ID` (`status_ID`),
  CONSTRAINT `receivables_ibfk_1` FOREIGN KEY (`debtor_ID`) REFERENCES `debtors` (`debtorID`) ON UPDATE CASCADE,
  CONSTRAINT `receivables_ibfk_2` FOREIGN KEY (`account_ID`) REFERENCES `saving_accounts` (`accountID`) ON UPDATE CASCADE,
  CONSTRAINT `receivables_ibfk_3` FOREIGN KEY (`status_ID`) REFERENCES `receivable_status` (`statusID`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `receivables`
--

LOCK TABLES `receivables` WRITE;
/*!40000 ALTER TABLE `receivables` DISABLE KEYS */;
/*!40000 ALTER TABLE `receivables` ENABLE KEYS */;
UNLOCK TABLES;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'IGNORE_SPACE,NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `Balance record update/creation on receivable insertion` AFTER
INSERT
	ON
	`receivables` FOR EACH ROW BEGIN
DECLARE v_user_ID INT(20);

DECLARE v_default_account_ID INT(20);

DECLARE v_balance_record_name VARCHAR(50);

DECLARE v_record_month INT(20);

DECLARE v_record_year INT(20);

DECLARE v_has_balance_record TINYINT(1);

DECLARE v_record_creation_result TINYINT(1);

DECLARE v_current_balance_record_value INT(20);

DECLARE v_new_balance_record_value INT(20);


SELECT
	sa.user_ID
INTO
	v_user_ID
FROM
	receivables rcs
INNER JOIN saving_accounts sa ON
	rcs.account_ID = sa.accountID
WHERE
	rcs.receivableID = NEW.receivableID;


SELECT
	sa.accountID
INTO
	v_default_account_ID
FROM
	saving_accounts sa
INNER JOIN saving_account_types sat ON
	sa.type_ID = sat.typeID
WHERE
	sa.user_ID = v_user_ID
	AND sat.typeName LIKE '%SYSTEM_DEFINED%';

SET
v_record_month = MONTH(NEW.createdDate);

SET
v_record_year = YEAR(NEW.createdDate);


CALL has_balance_record_for_selected_month(v_default_account_ID,
v_record_month,
v_record_year,
v_has_balance_record);

IF(v_has_balance_record = 0) THEN
SET
v_balance_record_name = CONCAT('balance_record_', NEW.createdDate);


SET
v_new_balance_record_value = -NEW.value;


CALL create_saving_account_balance_record(v_user_ID,
v_default_account_ID,
v_balance_record_name,
v_new_balance_record_value,
v_record_month,
v_record_year,
v_record_creation_result);


CALL log_receivable_history(NEW.receivableID,
@logOutput);

ELSE

SELECT
	value
INTO
	v_current_balance_record_value
FROM
	saving_accounts_balance
WHERE
	account_ID = v_default_account_ID
	AND MONTH = v_record_month
	AND YEAR = v_record_year;


SET
v_new_balance_record_value = v_current_balance_record_value - NEW.value;


UPDATE
	saving_accounts_balance
SET
	value = v_new_balance_record_value
WHERE
	account_ID = v_default_account_ID
	AND MONTH = v_record_month
	AND YEAR = v_record_year;


CALL log_receivable_history(NEW.receivableID,
@logOutput);









END IF;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'IGNORE_SPACE,NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `Balance record update on receivable update` AFTER
UPDATE
	ON
	`receivables` FOR EACH ROW BEGIN
DECLARE v_current_balance_record_value INT(20);

DECLARE v_new_balance_record_value INT(20);

DECLARE v_new_receivable_status INT(20);

DECLARE v_difference INT(20);


SELECT
	value
INTO
	v_current_balance_record_value
FROM
	saving_accounts_balance
WHERE
	account_ID = NEW.account_ID
	AND MONTH = MONTH(NEW.createdDate)
	AND YEAR = YEAR(NEW.createdDate);


CALL get_new_receivable_status(NEW.receivableID, v_new_receivable_status);


IF NEW.value > OLD.value THEN

 
SET
	v_difference = NEW.value - OLD.value;

SET
	v_new_balance_record_value = v_current_balance_record_value - v_difference;


ELSEIF NEW.value < OLD.value THEN

 
SET
	v_difference = OLD.value - NEW.value;

SET
	v_new_balance_record_value = v_current_balance_record_value + v_difference;


ELSEIF v_new_receivable_status = 'Paid'
AND NEW.payOffDate != NULL THEN
	
	SET
		v_difference = NEW.value - OLD.totalPaidAmount;

	SET
		v_new_balance_record_value = v_current_balance_record_value + v_difference;


ELSEIF NEW.totalPaidAmount > OLD.totalPaidAmount THEN
	SET
		v_difference = NEW.totalPaidAmount - OLD.totalPaidAmount;
	
	SET
		v_new_balance_record_value = v_current_balance_record_value + v_difference;

	
ELSEIF NEW.totalPaidAmount < OLD.totalPaidAmount THEN
	SET 
		v_difference = OLD.totalPaidAmount - NEW.totalPaidAmount;
		
	SET 
		v_new_balance_record_value = v_current_balance_record_value - v_difference;
	
ELSE 

	SET
		v_new_balance_record_value = v_current_balance_record_value;
END IF;


IF v_new_balance_record_value != v_current_balance_record_value THEN

UPDATE
	saving_accounts_balance
SET
	value = v_new_balance_record_value
WHERE
	account_ID = OLD.account_ID
	AND MONTH = MONTH(OLD.createdDate)
	AND YEAR = YEAR(OLD.createdDate);
END IF;

IF (OLD.name != NEW.name)
OR (OLD.value != NEW.value)
OR (OLD.debtor_ID != NEW.debtor_ID)
OR (OLD.totalPaidAmount != NEW.totalPaidAmount)
OR (OLD.status_ID != NEW.status_ID)
OR (OLD.createdDate != NEW.createdDate)
OR (OLD.dueDate != NEW.dueDate)
THEN 

CALL log_receivable_history(NEW.receivableID,
@logOutput);

END IF;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'IGNORE_SPACE,NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `Balance record update on receivable deletion` AFTER
DELETE
	ON
	`receivables` FOR EACH ROW BEGIN
DECLARE v_current_balance_record_value INT(20);

DECLARE v_new_balance_record_value INT(20);


SELECT
	value
INTO
	v_current_balance_record_value
FROM
	saving_accounts_balance
WHERE
	account_ID = OLD.account_ID
	AND MONTH = MONTH(OLD.createdDate)
	AND YEAR = YEAR(OLD.createdDate);


SET
v_new_balance_record_value = (v_current_balance_record_value - OLD.totalPaidAmount) + OLD.value;


UPDATE
	saving_accounts_balance
SET
	value = v_new_balance_record_value
WHERE
	account_ID = OLD.account_ID
	AND MONTH = MONTH(OLD.createdDate)
	AND YEAR = YEAR(OLD.createdDate);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `saving_account_types`
--

DROP TABLE IF EXISTS `saving_account_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `saving_account_types` (
  `typeID` int(10) NOT NULL AUTO_INCREMENT,
  `typeName` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`typeID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `saving_account_types`
--

LOCK TABLES `saving_account_types` WRITE;
/*!40000 ALTER TABLE `saving_account_types` DISABLE KEYS */;
INSERT INTO `saving_account_types` VALUES (1,'SYSTEM_DEFINED-DEFAULT_SAVING_ACCOUNT'),(2,'USER_DEFINED-CUSTOM_SAVING_ACCOUNT');
/*!40000 ALTER TABLE `saving_account_types` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `saving_accounts`
--

DROP TABLE IF EXISTS `saving_accounts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `saving_accounts` (
  `accountID` int(10) NOT NULL AUTO_INCREMENT,
  `accountName` varchar(50) DEFAULT NULL,
  `accountNumber` varchar(34) DEFAULT NULL,
  `user_ID` int(10) NOT NULL,
  `type_ID` int(10) NOT NULL,
  `bank_ID` int(10) NOT NULL,
  `currency_ID` int(10) NOT NULL,
  `creationDate` date DEFAULT NULL,
  PRIMARY KEY (`accountID`),
  UNIQUE KEY `accountName` (`accountName`,`user_ID`),
  UNIQUE KEY `accountName_2` (`accountName`,`user_ID`,`type_ID`,`bank_ID`),
  KEY `user_ID` (`user_ID`),
  KEY `type_ID` (`type_ID`),
  KEY `bank_ID` (`bank_ID`),
  KEY `currency` (`currency_ID`),
  CONSTRAINT `saving_accounts_ibfk_1` FOREIGN KEY (`user_ID`) REFERENCES `users` (`userID`) ON UPDATE CASCADE,
  CONSTRAINT `saving_accounts_ibfk_2` FOREIGN KEY (`type_ID`) REFERENCES `saving_account_types` (`typeID`) ON UPDATE CASCADE,
  CONSTRAINT `saving_accounts_ibfk_3` FOREIGN KEY (`bank_ID`) REFERENCES `banks` (`bankID`) ON UPDATE CASCADE,
  CONSTRAINT `saving_accounts_ibfk_4` FOREIGN KEY (`currency_ID`) REFERENCES `currencies` (`currencyID`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `saving_accounts`
--

LOCK TABLES `saving_accounts` WRITE;
/*!40000 ALTER TABLE `saving_accounts` DISABLE KEYS */;
/*!40000 ALTER TABLE `saving_accounts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `saving_accounts_balance`
--

DROP TABLE IF EXISTS `saving_accounts_balance`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `saving_accounts_balance` (
  `recordID` int(10) NOT NULL AUTO_INCREMENT,
  `user_ID` int(10) NOT NULL,
  `account_ID` int(10) DEFAULT NULL,
  `recordName` varchar(50) DEFAULT NULL,
  `value` int(10) NOT NULL,
  `month` int(2) NOT NULL,
  `year` int(4) NOT NULL,
  PRIMARY KEY (`recordID`),
  UNIQUE KEY `account_ID` (`account_ID`,`month`,`year`),
  KEY `user_ID` (`user_ID`),
  CONSTRAINT `saving_accounts_balance_ibfk_1` FOREIGN KEY (`user_ID`) REFERENCES `users` (`userID`) ON UPDATE CASCADE,
  CONSTRAINT `saving_accounts_balance_ibfk_2` FOREIGN KEY (`account_ID`) REFERENCES `saving_accounts` (`accountID`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `saving_accounts_balance`
--

LOCK TABLES `saving_accounts_balance` WRITE;
/*!40000 ALTER TABLE `saving_accounts_balance` DISABLE KEYS */;
/*!40000 ALTER TABLE `saving_accounts_balance` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `saving_accounts_expenses`
--

DROP TABLE IF EXISTS `saving_accounts_expenses`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `saving_accounts_expenses` (
  `expenseID` int(20) NOT NULL AUTO_INCREMENT,
  `account_ID` int(20) NOT NULL,
  `name` varchar(50) NOT NULL,
  `type` int(20) NOT NULL,
  `value` int(20) NOT NULL,
  `date` date NOT NULL,
  PRIMARY KEY (`expenseID`),
  KEY `type` (`type`),
  KEY `saving_accounts_expenses_ibfk_3` (`account_ID`),
  CONSTRAINT `saving_accounts_expenses_ibfk_1` FOREIGN KEY (`type`) REFERENCES `expense_types` (`categoryID`) ON UPDATE CASCADE,
  CONSTRAINT `saving_accounts_expenses_ibfk_3` FOREIGN KEY (`account_ID`) REFERENCES `saving_accounts` (`accountID`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `saving_accounts_expenses`
--

LOCK TABLES `saving_accounts_expenses` WRITE;
/*!40000 ALTER TABLE `saving_accounts_expenses` DISABLE KEYS */;
/*!40000 ALTER TABLE `saving_accounts_expenses` ENABLE KEYS */;
UNLOCK TABLES;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_unicode_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `Balance record update/creation after SAE creation` AFTER INSERT ON `saving_accounts_expenses` FOR EACH ROW BEGIN
DECLARE v_records_number INT(20);
DECLARE v_default_account_ID INT(20);
DECLARE v_record_name VARCHAR(40);
DECLARE v_user_ID INT(20);

SET v_record_name = CONCAT('balance_record_', DATE_FORMAT(NEW.date, '%Y-%m-%d'));


SELECT sa.accountID, us.userID
INTO v_default_account_ID,
v_user_ID
FROM saving_accounts sa
INNER JOIN users us ON sa.user_ID = us.userID
INNER JOIN saving_account_types sat ON sa.type_ID = sat.typeID
WHERE sa.accountID = NEW.account_ID
AND sat.typeName LIKE '%SYSTEM_DEFINED%';


IF v_default_account_ID > 0 THEN
SELECT COUNT(*) 
INTO v_records_number
FROM saving_accounts_balance
WHERE month = MONTH(NEW.date)
AND year = YEAR(NEW.date)
AND user_ID = v_user_ID
AND account_ID = v_default_account_ID;

IF v_records_number = 0 THEN
INSERT INTO saving_accounts_balance(
user_ID,
account_ID,
recordName,
value,
month,
year
) VALUES (
v_user_ID,
v_default_account_ID,
v_record_name,
-(NEW.value),
MONTH(NEW.date),
YEAR(NEW.date)
);
ELSE
UPDATE saving_accounts_balance
SET value = value - NEW.value,
recordName = v_record_name
WHERE month = MONTH(NEW.date)
AND year = YEAR(NEW.date)
AND user_ID = v_user_ID
AND account_ID = v_default_account_ID;

END IF;
END IF;

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_unicode_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `Balance record update after SAE update` AFTER UPDATE ON `saving_accounts_expenses` FOR EACH ROW BEGIN
DECLARE v_record_amount_difference INT(20);
DECLARE v_new_record_name VARCHAR(40);
DECLARE v_default_account_ID INT(20);
DECLARE v_user_ID INT(20);

SET v_record_amount_difference = OLD.value - NEW.value;
SET v_new_record_name = CONCAT('balance_record_', DATE_FORMAT(NEW.date, '%Y-%m-%d'));



SELECT sa.accountID, us.userID
INTO v_default_account_ID,
v_user_ID
FROM saving_accounts sa
INNER JOIN users us ON sa.user_ID = us.userID
INNER JOIN saving_account_types sat ON sa.type_ID = sat.typeID
WHERE sa.accountID = NEW.account_ID
AND sat.typeName LIKE '%SYSTEM_DEFINED%';



IF v_default_account_ID > 0 THEN
UPDATE saving_accounts_balance
SET value = value + v_record_amount_difference,
recordName = v_new_record_name
WHERE month = MONTH(NEW.date)
AND year = YEAR(NEW.date)
AND user_ID = v_user_ID
AND account_ID = v_default_account_ID;

END IF;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_unicode_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `Balance record update after SAE deletion` AFTER DELETE ON `saving_accounts_expenses` FOR EACH ROW BEGIN 
DECLARE v_new_record_name VARCHAR(30);
DECLARE v_default_account_ID INT(20);
DECLARE v_user_ID INT(10);
DECLARE v_added_amount INT(20);

SET v_new_record_name = CONCAT('balance_record_', DATE_FORMAT(CURRENT_DATE,'%Y-%m-%d'));


SELECT sa.accountID, us.userID
INTO v_default_account_ID,
v_user_ID
FROM saving_accounts sa
INNER JOIN users us ON sa.user_ID = us.userID
INNER JOIN saving_account_types sat ON sa.type_ID = sat.typeID
WHERE sa.accountID = OLD.account_ID
AND sat.typeName LIKE '%SYSTEM_DEFINED%';

SET v_added_amount = OLD.value;

IF v_default_account_ID > 0 THEN 
UPDATE saving_accounts_balance SET 
recordName = v_new_record_name,
value = value + v_added_amount
WHERE month = MONTH(OLD.DATE)
AND year = YEAR(OLD.DATE)
AND user_ID = v_user_ID
AND account_ID = v_default_account_ID;

END IF;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `saving_accounts_interest`
--

DROP TABLE IF EXISTS `saving_accounts_interest`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `saving_accounts_interest` (
  `interestID` int(20) NOT NULL AUTO_INCREMENT,
  `account_ID` int(20) NOT NULL,
  `interestName` varchar(50) DEFAULT NULL,
  `interestType` int(20) NOT NULL,
  `paymentType` int(20) NOT NULL,
  `interestRate` double DEFAULT NULL,
  `value` double NOT NULL,
  `transactionID` varchar(50) DEFAULT NULL,
  `creationDate` date DEFAULT NULL,
  `updatedDate` date DEFAULT NULL,
  PRIMARY KEY (`interestID`),
  KEY `saving_accounts_interest_ibfk_1` (`account_ID`),
  KEY `saving_accounts_interest_ibfk_2` (`interestType`),
  KEY `paymentType` (`paymentType`),
  CONSTRAINT `saving_accounts_interest_ibfk_1` FOREIGN KEY (`account_ID`) REFERENCES `saving_accounts` (`accountID`) ON UPDATE CASCADE,
  CONSTRAINT `saving_accounts_interest_ibfk_2` FOREIGN KEY (`interestType`) REFERENCES `interest_types` (`typeID`) ON UPDATE CASCADE,
  CONSTRAINT `saving_accounts_interest_ibfk_3` FOREIGN KEY (`paymentType`) REFERENCES `interest_payment_type` (`typeID`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `saving_accounts_interest`
--

LOCK TABLES `saving_accounts_interest` WRITE;
/*!40000 ALTER TABLE `saving_accounts_interest` DISABLE KEYS */;
/*!40000 ALTER TABLE `saving_accounts_interest` ENABLE KEYS */;
UNLOCK TABLES;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_unicode_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `External account balance insert/update on insert` AFTER INSERT ON `saving_accounts_interest` FOR EACH ROW BEGIN
DECLARE v_has_balance_record_for_account TINYINT(1) DEFAULT 0;
DECLARE v_current_balance_record_value DOUBLE DEFAULT 0;
DECLARE v_new_balance_record_value DOUBLE DEFAULT 0;
DECLARE v_has_created_balance_record_for_account TINYINT(1) DEFAULT 0;
DECLARE v_has_updated_balance_record_for_account TINYINT(1) DEFAULT 0;
DECLARE v_balance_record_name VARCHAR(50) DEFAULT NULL;


CALL has_balance_record_for_selected_month(NEW.account_ID, MONTH(NEW.creationDate), YEAR(NEW.creationDate), v_has_balance_record_for_account);


IF v_has_balance_record_for_account = 0 THEN
	SET v_balance_record_name = CONCAT('balance_record_', 	  CURDATE());
	CALL 							   	create_external_account_balance_record(NEW.account_ID, 	v_balance_record_name, NEW.value, NEW.creationDate, NULL, v_has_created_balance_record_for_account);
    
    IF v_has_created_balance_record_for_account = 0 THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Cannot create a new balance record on interest insertion! Check the data and, if necessary, please create the record manually.';
    
    END IF;


ELSEIF v_has_balance_record_for_account = 1 THEN


SELECT get_balance_record_value_with_double_precision(NEW.account_ID, NEW.creationDate)
INTO v_current_balance_record_value
FROM DUAL;


SET v_new_balance_record_value = v_current_balance_record_value + NEW.value;

	UPDATE external_accounts_balance
    SET value = v_new_balance_record_value,
    lastUpdatedDate = CURDATE()
    WHERE account_ID = NEW.account_ID
    AND MONTH(createdDate) = MONTH(NEW.creationDate)
    AND YEAR(createdDate) = YEAR(NEW.creationDate);
    
    SET v_has_updated_balance_record_for_account = ROW_COUNT();
    
    IF v_has_updated_balance_record_for_account = 0 THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Cannot update the existing balance record on interest insertion! Check the data and, if necessary, please update the record manually.';
    
    END IF;
    
END IF;

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_unicode_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `External account balance update on update` AFTER UPDATE ON `saving_accounts_interest` FOR EACH ROW BEGIN
DECLARE v_interest_difference DOUBLE DEFAULT 0;
DECLARE v_current_record_balance_value DOUBLE DEFAULT 0;
DECLARE v_new_record_balance_value DOUBLE DEFAULT 0;
DECLARE v_update_result TINYINT(1) DEFAULT 0;


SET v_interest_difference = NEW.value - OLD.value;


IF v_interest_difference != 0 THEN

SELECT get_balance_record_value_with_double_precision(NEW.account_ID,
NEW.creationDate)
INTO v_current_record_balance_value
FROM DUAL;                                                  

	IF v_interest_difference > 0 THEN
    SET v_new_record_balance_value = 						v_current_record_balance_value + 						v_interest_difference;
    
    ELSEIF v_interest_difference < 0 THEN
    SET v_new_record_balance_value = 						v_current_record_balance_value -						ABS(v_interest_difference);
    
    END IF;
    

UPDATE external_accounts_balance
SET value = v_new_record_balance_value,
lastUpdatedDate = CURDATE()
WHERE account_ID = NEW.account_ID
AND MONTH(createdDate) = MONTH(NEW.creationDate)
AND YEAR(createdDate) = YEAR(NEW.creationDate);


SET v_update_result = ROW_COUNT();


IF v_update_result = 0 THEN
SIGNAL SQLSTATE '45000'
SET MESSAGE_TEXT = 'Unable to update the external account balance record on interest update! Please check the data and, if necessary, update the record manually.';

END IF;
   
END IF;
    
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_unicode_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `External account balance update after delete` AFTER DELETE ON `saving_accounts_interest` FOR EACH ROW BEGIN 
DECLARE v_current_record_balance_value DOUBLE DEFAULT 0;
DECLARE v_new_record_balance_value DOUBLE DEFAULT 0;
DECLARE v_update_result TINYINT(1) DEFAULT 0;


SELECT get_balance_record_value_with_double_precision(OLD.account_ID,
OLD.creationDate)
INTO v_current_record_balance_value
FROM DUAL; 


SET v_new_record_balance_value = v_current_record_balance_value - OLD.value;


UPDATE external_accounts_balance
SET value = v_new_record_balance_value,
lastUpdatedDate = CURDATE()
WHERE account_ID = OLD.account_ID
AND MONTH(createdDate) = MONTH(OLD.creationDate)
AND YEAR(createdDate) = YEAR(OLD.creationDate);


SET v_update_result = ROW_COUNT();


IF v_update_result = 0 THEN
SIGNAL SQLSTATE '45000'
SET MESSAGE_TEXT = 'Unable to update the external account balance record on interest deletion! Please check the data and, if necessary, update the record manually.';

END IF;


END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `saving_accounts_transfers`
--

DROP TABLE IF EXISTS `saving_accounts_transfers`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `saving_accounts_transfers` (
  `transferID` int(10) NOT NULL AUTO_INCREMENT,
  `senderAccountID` int(10) NOT NULL,
  `receivingAccountID` int(10) DEFAULT NULL,
  `transferName` varchar(50) DEFAULT NULL,
  `sentValue` int(20) DEFAULT NULL,
  `receivedValue` int(20) DEFAULT NULL,
  `exchangeRate` double DEFAULT NULL,
  `transactionID` varchar(50) DEFAULT NULL,
  `observations` varchar(150) DEFAULT NULL,
  `transferDate` date DEFAULT NULL,
  PRIMARY KEY (`transferID`),
  KEY `senderAccountID` (`senderAccountID`),
  KEY `receivingAccountID` (`receivingAccountID`),
  CONSTRAINT `saving_accounts_transfers_ibfk_1` FOREIGN KEY (`senderAccountID`) REFERENCES `saving_accounts` (`accountID`) ON UPDATE CASCADE,
  CONSTRAINT `saving_accounts_transfers_ibfk_2` FOREIGN KEY (`receivingAccountID`) REFERENCES `saving_accounts` (`accountID`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `saving_accounts_transfers`
--

LOCK TABLES `saving_accounts_transfers` WRITE;
/*!40000 ALTER TABLE `saving_accounts_transfers` DISABLE KEYS */;
/*!40000 ALTER TABLE `saving_accounts_transfers` ENABLE KEYS */;
UNLOCK TABLES;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'IGNORE_SPACE,NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `Saving accounts balance update on insert` AFTER
INSERT
	ON
	`saving_accounts_transfers` FOR EACH ROW BEGIN

DECLARE v_has_balance_record_for_sender_account TINYINT(1) DEFAULT 0;

DECLARE v_has_balance_record_for_receiving_account TINYINT(1) DEFAULT 0;

DECLARE v_has_created_sender_account_balance_record TINYINT(1) DEFAULT 0;

DECLARE v_has_created_receiving_account_balance_record TINYINT(1) DEFAULT 0;

DECLARE v_has_updated_balance_record TINYINT(1) DEFAULT 0;

DECLARE v_user_ID INT DEFAULT 0;


CALL has_balance_record_for_selected_month(NEW.senderAccountID,
MONTH(NEW.transferDate),
YEAR(NEW.transferDate),
v_has_balance_record_for_sender_account);



CALL has_balance_record_for_selected_month(NEW.receivingAccountID,
MONTH(NEW.transferDate),
YEAR(NEW.transferDate),
v_has_balance_record_for_receiving_account);



SELECT
	user_ID 
INTO
	v_user_ID
FROM
	saving_accounts
WHERE
	accountID = NEW.senderAccountID
LIMIT 1;


IF v_has_balance_record_for_sender_account = 0 THEN
	CALL create_account_balance_record_on_transfer(v_user_ID,
NEW.senderAccountID,
-NEW.sentValue,
NEW.transferDate,
v_has_created_sender_account_balance_record);
ELSE 
	CALL update_account_balance_on_transfer(NEW.senderAccountID,
NEW.sentValue,
NEW.transferDate,
'SENDER',
v_has_updated_balance_record);
END IF;


IF v_has_balance_record_for_receiving_account = 0 THEN
	CALL create_account_balance_record_on_transfer(v_user_ID,
NEW.receivingAccountID,
NEW.receivedValue,
NEW.transferDate,
v_has_created_receiving_account_balance_record);
ELSE
	CALL update_account_balance_on_transfer(NEW.receivingAccountID,
NEW.receivedValue,
NEW.transferDate,
'RECEIVER',
v_has_updated_balance_record);
END IF;

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'IGNORE_SPACE,NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `Saving accounts balance update on update` AFTER
UPDATE
	ON
	`saving_accounts_transfers` FOR EACH ROW BEGIN
DECLARE v_sender_account_record_update_result TINYINT(1) DEFAULT 0;

DECLARE v_receiving_account_record_update_result TINYINT(1) DEFAULT 0;


IF NEW.sentValue != OLD.sentValue
OR NEW.receivedValue != OLD.receivedValue THEN
	CALL update_balance_record_on_transfer_update(OLD.senderAccountID,
OLD.receivingAccountID,
NEW.sentValue,
OLD.sentValue,
NEW.receivedValue,
OLD.receivedValue,
OLD.transferDate,
v_sender_account_record_update_result,
v_receiving_account_record_update_result);


	IF v_sender_account_record_update_result = 0 THEN
    SIGNAL SQLSTATE '45000'
    SET
MESSAGE_TEXT = 'Unable to update the balance record for the sender account! Please check the data and, if necessary, update the record manually.';
END IF;

IF v_receiving_account_record_update_result = 0 THEN
    SIGNAL SQLSTATE '45000'
    SET
MESSAGE_TEXT = 'Unable to update the balance record for the treceiving account! Please check the data and, if necessary, update the record manually.';
END IF;
END IF;

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'IGNORE_SPACE,NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `Saving accounts balance update on delete` AFTER
DELETE
	ON
	`saving_accounts_transfers` FOR EACH ROW BEGIN
DECLARE v_sender_account_update_result TINYINT(1) DEFAULT 0;

DECLARE v_receiving_account_update_result TINYINT(1) DEFAULT 0;


CALL update_account_balance_on_transfer_delete(OLD.senderAccountID,
OLD.receivingAccountID,
OLD.sentValue,
OLD.receivedValue,
OLD.transferDate,
v_sender_account_update_result,
v_receiving_account_update_result);


IF v_sender_account_update_result = 0 THEN
SIGNAL SQLSTATE '45000'
SET
MESSAGE_TEXT = 'Unable to update the sender account balance record after transfer deletion! Please check the data and, if necessary, update the record manually.';
END IF;

IF v_receiving_account_update_result = 0 THEN
SIGNAL SQLSTATE '45000'
SET
MESSAGE_TEXT = 'Unable to update the receiving account balance record after transfer deletion! Please check the data and, if necessary, update the record manually.';
END IF;

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `savings`
--

DROP TABLE IF EXISTS `savings`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `savings` (
  `savingID` int(10) NOT NULL AUTO_INCREMENT,
  `user_ID` int(10) NOT NULL,
  `name` varchar(50) NOT NULL,
  `value` int(20) NOT NULL,
  `date` date NOT NULL,
  PRIMARY KEY (`savingID`),
  UNIQUE KEY `name` (`name`),
  UNIQUE KEY `date` (`date`),
  KEY `user_ID` (`user_ID`),
  CONSTRAINT `savings_ibfk_1` FOREIGN KEY (`user_ID`) REFERENCES `users` (`userID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `savings`
--

LOCK TABLES `savings` WRITE;
/*!40000 ALTER TABLE `savings` DISABLE KEYS */;
/*!40000 ALTER TABLE `savings` ENABLE KEYS */;
UNLOCK TABLES;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_unicode_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `Balance record creation` AFTER INSERT ON `savings` FOR EACH ROW BEGIN
DECLARE recordsNumber INTEGER(10);
DECLARE defaultAccountID INTEGER(10);
DECLARE recordName VARCHAR(40);

SET recordName = CONCAT('balance_record_', DATE_FORMAT(NEW.date, '%Y-%m-%d'));

SELECT accountID
INTO defaultAccountID
FROM saving_accounts
WHERE user_ID = NEW.user_ID
AND type_ID = 1;

IF defaultAccountID > 0 THEN
SELECT COUNT(*) 
INTO recordsNumber
FROM saving_accounts_balance
WHERE month = MONTH(NEW.date)
AND year = YEAR(NEW.date)
AND user_ID = NEW.user_ID
AND account_ID = defaultAccountID;


IF recordsNumber = 0 THEN
INSERT INTO saving_accounts_balance(
user_ID,
account_ID,
recordName,
value,
month,
year
) VALUES (
NEW.user_ID,
defaultAccountID,
recordName,
NEW.value,
MONTH(NEW.date),
YEAR(NEW.date)
);
ELSE
UPDATE saving_accounts_balance
SET value = value + NEW.value,
recordName = recordName
WHERE month = MONTH(NEW.date)
AND year = YEAR(NEW.date)
AND user_ID = NEW.user_ID
AND account_ID = defaultAccountID;

END IF;
END IF;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_unicode_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `Balance record update` AFTER UPDATE ON `savings` FOR EACH ROW BEGIN

DECLARE recordAmountDifference INT(10);
DECLARE newRecordName VARCHAR(30);
DECLARE defaultAccountID INT(10);

SET recordAmountDifference = NEW.value - OLD.value;

SET newRecordName = CONCAT('balance_record_', DATE_FORMAT(NEW.date, '%Y-%m-%d'));

SET defaultAccountID = (SELECT accountID
FROM saving_accounts
WHERE user_ID = NEW.user_ID
AND type_ID = 1); 

IF defaultAccountID > 0 THEN
UPDATE saving_accounts_balance SET 
recordName = newRecordName,
value = value + recordAmountDifference
WHERE month = MONTH(NEW.date)
AND year = YEAR(NEW.date)
AND user_ID = NEW.user_ID
AND account_ID = defaultAccountID;

END IF;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_unicode_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `Balance record update after deleted saving` AFTER DELETE ON `savings` FOR EACH ROW BEGIN

DECLARE newRecordName VARCHAR(30);
DECLARE defaultAccountID INT(10);
DECLARE subtractedAmount INT(10);

SET newRecordName = CONCAT('balance_record_', DATE_FORMAT(CURRENT_DATE,'%Y-%m-%d'));

SET defaultAccountID = (SELECT accountID
FROM saving_accounts
WHERE user_ID = OLD.user_ID
AND type_ID = 1);

SET subtractedAmount = OLD.value;

IF defaultAccountID > 0 THEN
UPDATE saving_accounts_balance SET 
recordName = newRecordName,
value = value - subtractedAmount
WHERE month = MONTH(OLD.DATE)
AND year = YEAR(OLD.DATE)
AND user_ID = OLD.user_ID
AND account_ID = defaultAccountID;
END IF;

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `users` (
  `userID` int(10) NOT NULL AUTO_INCREMENT,
  `username` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `salt` binary(16) NOT NULL,
  `password` varchar(50) NOT NULL,
  `email` varchar(30) NOT NULL,
  PRIMARY KEY (`userID`),
  UNIQUE KEY `username` (`username`),
  UNIQUE KEY `username_2` (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users_creditors`
--

DROP TABLE IF EXISTS `users_creditors`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `users_creditors` (
  `user_ID` int(10) NOT NULL,
  `creditor_ID` int(10) NOT NULL,
  KEY `user_ID` (`user_ID`),
  KEY `creditor_ID` (`creditor_ID`),
  CONSTRAINT `users_creditors_ibfk_1` FOREIGN KEY (`user_ID`) REFERENCES `users` (`userID`),
  CONSTRAINT `users_creditors_ibfk_2` FOREIGN KEY (`creditor_ID`) REFERENCES `creditors` (`creditorID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users_creditors`
--

LOCK TABLES `users_creditors` WRITE;
/*!40000 ALTER TABLE `users_creditors` DISABLE KEYS */;
/*!40000 ALTER TABLE `users_creditors` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users_debtors`
--

DROP TABLE IF EXISTS `users_debtors`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `users_debtors` (
  `user_ID` int(10) NOT NULL,
  `debtor_ID` int(10) NOT NULL,
  KEY `userID` (`user_ID`),
  KEY `debtorID` (`debtor_ID`),
  CONSTRAINT `users_debtors_ibfk_1` FOREIGN KEY (`user_ID`) REFERENCES `users` (`userID`) ON UPDATE CASCADE,
  CONSTRAINT `users_debtors_ibfk_2` FOREIGN KEY (`debtor_ID`) REFERENCES `debtors` (`debtorID`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users_debtors`
--

LOCK TABLES `users_debtors` WRITE;
/*!40000 ALTER TABLE `users_debtors` DISABLE KEYS */;
/*!40000 ALTER TABLE `users_debtors` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping routines for database 'empty_db'
--
/*!50003 DROP FUNCTION IF EXISTS `get_account_type` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'IGNORE_SPACE,NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `get_account_type`(`p_account_ID` INT) RETURNS varchar(20) CHARSET utf8mb4
    NO SQL
BEGIN


DECLARE v_account_type VARCHAR(20) DEFAULT NULL;

SELECT
	typeName 
INTO
	v_account_type
FROM
	saving_accounts sa
INNER JOIN saving_account_types sat ON
	sa.type_ID = sat.typeID
WHERE
	sa.accountID = p_account_ID;

RETURN v_account_type;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `get_action_performed_on_receivable` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'IGNORE_SPACE,NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `get_action_performed_on_receivable`(p_receivable_ID INT) RETURNS varchar(50) CHARSET utf8mb4
BEGIN

	
DECLARE v_action varchar(50);

DECLARE v_hist_records_count INT(20);

DECLARE v_total_partial_payments INT(20);

DECLARE v_current_receivable_name VARCHAR(50);

DECLARE v_current_receivable_value INT(20);

DECLARE v_current_total_paid_amount INT(20);

DECLARE v_current_status VARCHAR(50);

DECLARE v_current_debtor_ID INT(20);

DECLARE v_current_created_date DATE;

DECLARE v_current_due_date DATE;

DECLARE v_pay_off_date date;

DECLARE v_hist_receivable_name VARCHAR(50);

DECLARE v_hist_receivable_value INT(20);

DECLARE v_hist_total_paid_amount INT(20);

DECLARE v_hist_debtor_ID INT(20);

DECLARE v_hist_created_date DATE;

DECLARE v_hist_due_date DATE;


SET v_action = 'Undefined action';


SELECT
	COUNT(*)
INTO
	v_hist_records_count
FROM
	receivable_history
WHERE
	receivable_ID = p_receivable_ID;


SELECT
	rc.name,
	rc.value,
	rc.totalPaidAmount,
	rcs.statusDescription,
	rc.debtor_ID,
	rc.createdDate,
	rc.dueDate,
	rc.payOffDate
INTO
	v_current_receivable_name,
	v_current_receivable_value,
	v_current_total_paid_amount,
	v_current_status,
	v_current_debtor_ID,
	v_current_created_date,
	v_current_due_date,
	v_pay_off_date
FROM
	receivables rc
INNER JOIN receivable_status rcs ON
	rc.status_ID = rcs.statusID
WHERE
	rc.receivableID = p_receivable_ID;


SELECT
	name,
	value,
	totalPaidAmount,
	debtor_ID,
	createdDate,
	dueDate
INTO
	v_hist_receivable_name,
	v_hist_receivable_value,
	v_hist_total_paid_amount,
	v_hist_debtor_ID,
	v_hist_created_date,
	v_hist_due_date
FROM
	receivable_history
WHERE
	receivable_ID = p_receivable_ID
	AND histID = (
	SELECT
		max(histID)
	FROM
		receivable_history
	WHERE
		receivable_ID = p_receivable_ID);


SELECT
	SUM(paymentValue)
INTO
	v_total_partial_payments
FROM
	partial_payments
WHERE
	receivable_ID = p_receivable_ID;


IF v_current_total_paid_amount = 0
	AND v_hist_records_count = 0 THEN 
SET
	v_action = 'Receivable creation';
END IF;


IF (v_total_partial_payments = v_current_total_paid_amount)
	AND (v_current_total_paid_amount != v_current_receivable_value)
	AND (v_current_total_paid_amount > v_hist_total_paid_amount) THEN
SET
	v_action = 'Partial payment insertion';
END IF;


IF (v_total_partial_payments < v_current_total_paid_amount)
	AND (v_current_total_paid_amount = v_current_receivable_value) THEN 
SET
	v_action = 'Marked as paid';
END IF;


IF (v_total_partial_payments = v_current_total_paid_amount)
	AND (v_current_total_paid_amount = v_current_receivable_value) THEN 
SET
	v_action = 'Fully paid by partial payments';
END IF;


IF v_current_due_date < CURDATE()
	AND v_current_status = 'Overdue' THEN 
SET
	v_action = 'Automatic status update to overdue';
END IF;


IF v_hist_records_count > 0 THEN 

	IF (v_current_receivable_value != v_hist_receivable_value)
		OR (v_current_debtor_ID != v_hist_debtor_ID)
		OR (v_current_receivable_name != v_hist_receivable_name)
		OR (v_current_created_date != v_hist_created_date)
		OR (v_current_due_date != v_hist_due_date) THEN 
			SET
				v_action = 'Receivable update';
	END IF;
END IF;


RETURN v_action;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `get_balance_record_value` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'IGNORE_SPACE,NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `get_balance_record_value`(`p_account_ID` INT(20),
`p_record_date` DATE) RETURNS int(11)
    NO SQL
BEGIN


DECLARE v_account_type VARCHAR(50) DEFAULT NULL;

DECLARE v_balance_record_value INT(20) DEFAULT 0;


SELECT
	get_account_type(p_account_ID)
INTO
	v_account_type
FROM
	DUAL;


IF v_account_type LIKE '%SYSTEM_DEFINED%' THEN
SELECT
	value
INTO
	v_balance_record_value
FROM
	saving_accounts_balance
WHERE
	account_ID = p_account_ID
	AND MONTH = MONTH(p_record_date)
	AND YEAR = YEAR(p_record_date);

ELSEIF v_account_type LIKE '%USER_DEFINED%' THEN
SELECT
	value
INTO
	v_balance_record_value
FROM
	external_accounts_balance
WHERE
	account_ID = p_account_ID
	AND MONTH(createdDate) = MONTH(p_record_date)
	AND YEAR(createdDate) = YEAR(p_record_date);
END IF;

RETURN v_balance_record_value;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `get_balance_record_value_with_double_precision` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'IGNORE_SPACE,NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `get_balance_record_value_with_double_precision`(`p_account_ID` INT(20),
`p_record_date` DATE) RETURNS double
    NO SQL
BEGIN


DECLARE v_account_type VARCHAR(50) DEFAULT NULL;

DECLARE v_balance_record_value DOUBLE DEFAULT 0;


SELECT
	get_account_type(p_account_ID)
INTO
	v_account_type
FROM
	DUAL;


IF v_account_type LIKE '%SYSTEM_DEFINED%' THEN
SELECT
	value
INTO
	v_balance_record_value
FROM
	saving_accounts_balance
WHERE
	account_ID = p_account_ID
	AND MONTH = MONTH(p_record_date)
	AND YEAR = YEAR(p_record_date);

ELSEIF v_account_type LIKE '%USER_DEFINED%' THEN
SELECT
	value
INTO
	v_balance_record_value
FROM
	external_accounts_balance
WHERE
	account_ID = p_account_ID
	AND MONTH(createdDate) = MONTH(p_record_date)
	AND YEAR(createdDate) = YEAR(p_record_date);
END IF;

RETURN v_balance_record_value;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `can_delete_selected_income` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'IGNORE_SPACE,NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `can_delete_selected_income`(IN `p_deleted_income_value` INT(20), IN `p_user_id` INT(20), IN `p_start_date` DATE, IN `p_end_date` DATE, OUT `p_result` TINYINT(1))
    NO SQL
BEGIN


DECLARE v_total_incomes INT DEFAULT 0;

DECLARE v_remaining_incomes INT DEFAULT 0;

DECLARE v_total_expenses INT DEFAULT 0;

DECLARE v_total_debts INT DEFAULT 0;

DECLARE v_total_savings INT DEFAULT 0;


SET
	v_total_incomes = (
SELECT
	COALESCE(SUM(value), 0)
FROM
	incomes
WHERE
	user_ID = p_user_id
	AND date BETWEEN p_start_date AND p_end_date);

SELECT
	(CONCAT('Total incomes: ', v_total_incomes));


SET
	v_total_expenses = (
SELECT
	COALESCE(SUM(value), 0)
FROM
	expenses
WHERE
	user_ID = p_user_id
	AND date BETWEEN p_start_date AND p_end_date);

SELECT
	(CONCAT('Total expenses: ', v_total_expenses));

SET
	v_total_debts = (
SELECT
	COALESCE(SUM(value), 0)
FROM
	debts
WHERE
	user_ID = p_user_id
	AND date BETWEEN p_start_date AND p_end_date);

SELECT
	(CONCAT('Total debts: ', v_total_debts));

SET
	v_total_savings = (
SELECT
	COALESCE(SUM(value), 0)
FROM
	savings
WHERE
	user_ID = p_user_id
	AND date BETWEEN p_start_date AND p_end_date);

SELECT
	(CONCAT('Total savings: ', v_total_savings));

SET
v_remaining_incomes = v_total_incomes - (v_total_expenses + v_total_debts + v_total_savings);

SELECT
	(CONCAT('Remaining incomes: ', v_remaining_incomes));


IF v_remaining_incomes > 0 THEN
	IF v_remaining_incomes >= p_deleted_income_value THEN
    	SET
			p_result = 1;
ELSE
    	SET
			p_result = 0;
END IF;
ELSE


IF v_remaining_incomes = 0
AND p_deleted_income_value = 0 THEN
    	SET
			p_result = 1;
ELSE 
		SET
			p_result = 0;
END IF;
END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `can_perform_requested_transfer` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'IGNORE_SPACE,NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `can_perform_requested_transfer`(IN `p_account_ID` INT(20), IN `p_transfer_value` INT(20), OUT `p_result` TINYINT(1),
OUT `p_account_balance` INT(30))
    NO SQL
BEGIN


DECLARE v_account_type VARCHAR(50) DEFAULT NULL;

DECLARE v_user_ID INT DEFAULT 0;

DECLARE v_total_credit INT DEFAULT 0;

DECLARE v_total_debit INT DEFAULT 0;

DECLARE v_total_transfers_in INT DEFAULT 0;

DECLARE v_total_transfers_out INT DEFAULT 0;

DECLARE v_total_interest_amount INT DEFAULT 0;

DECLARE v_total_savings INT DEFAULT 0;

DECLARE v_total_saving_account_expenses INT DEFAULT 0;

DECLARE v_account_balance INT DEFAULT 0;

SELECT
	sat.typeName,
	sa.user_ID
INTO
	v_account_type,
	v_user_ID
FROM
	saving_accounts sa
INNER JOIN saving_account_types sat ON
	sa.type_ID = sat.typeID
WHERE
	sa.accountID = p_account_ID;

SELECT
	(CONCAT('ACCOUNT TYPE: ', v_account_type));

SELECT
	(CONCAT('USER ID: ', v_user_ID));


SELECT
	COALESCE(SUM(receivedValue), 0)
INTO
	v_total_transfers_in
FROM
	saving_accounts_transfers
WHERE
	receivingAccountID = p_account_ID;

SELECT
	(CONCAT('TOTAL IN TRANSFERS: ', v_total_transfers_in));


SELECT
	COALESCE(SUM(sentValue), 0)
INTO
	v_total_transfers_out
FROM
	saving_accounts_transfers
WHERE
	senderAccountID = p_account_ID;

SELECT
	(CONCAT('TOTAL OUT TRANSFERS: ', v_total_transfers_out));


SELECT
	COALESCE(SUM(value), 0)
INTO
	v_total_interest_amount
FROM
	saving_accounts_interest
WHERE
	account_ID = p_account_ID;

SELECT
	(CONCAT('TOTAL INTEREST AMOUNT: ', v_total_interest_amount));


SELECT
	COALESCE(SUM(value), 0)
INTO
	v_total_saving_account_expenses
FROM
	saving_accounts_expenses
WHERE
	account_ID = p_account_ID;

SELECT
	(CONCAT('TOTAL SAVING ACCOUNT EXPENSES: ', v_total_saving_account_expenses));


IF v_account_type = 'SYSTEM_DEFINED-DEFAULT_SAVING_ACCOUNT' THEN


SELECT
	COALESCE(SUM(value), 0) 
INTO
	v_total_savings
FROM
	savings
WHERE
	user_ID = v_user_ID;

SELECT
	(CONCAT('TOTAL SAVINGS: ', v_total_savings));

SET
v_total_credit = v_total_transfers_in + v_total_interest_amount + v_total_savings;

SET
v_total_debit = v_total_transfers_out + v_total_saving_account_expenses;

SET
v_account_balance = v_total_credit - v_total_debit;

SELECT
	(CONCAT('ACCOUNT BALANCE: ', v_account_balance));

ELSEIF v_account_type = 'USER_DEFINED-CUSTOM_SAVING_ACCOUNT' THEN

SET
v_total_credit = v_total_transfers_in + v_total_interest_amount;

SET
v_total_debit = v_total_transfers_out + v_total_saving_account_expenses;

SET
v_account_balance = v_total_credit - v_total_debit;

SELECT
	(CONCAT('ACCOUNT BALANCE: ', v_account_balance));
END IF;

IF v_account_balance >= p_transfer_value THEN
SET
p_result = 1;

SET
p_account_balance = v_account_balance;

ELSE
SET
p_result = 0;

SET
p_account_balance = v_account_balance;
END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `can_update_element_to specified_value` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'IGNORE_SPACE,NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `can_update_element_to specified_value`(IN `p_updated_item_type` VARCHAR(20), IN `p_new_value` INT(20), IN `p_user_id` INT(20), IN `p_start_date` DATE, IN `p_end_date` DATE, OUT `p_result` TINYINT(1))
    NO SQL
BEGIN


DECLARE v_old_value INT DEFAULT 0;

DECLARE v_total_incomes INT DEFAULT 0;

DECLARE v_total_expenses INT DEFAULT 0;

DECLARE v_total_debts INT DEFAULT 0;

DECLARE v_total_savings INT DEFAULT 0;

DECLARE v_difference INT DEFAULT 0;

DECLARE v_remaining_amount INT DEFAULT 0;


IF p_updated_item_type = 'Expense' THEN
SET
	v_old_value = (
SELECT
	COALESCE(SUM(VALUE), 0)
FROM
	expenses
WHERE
	user_ID = p_user_id
	AND DATE BETWEEN p_start_date AND p_end_date);

ELSEIF p_updated_item_type = 'Debt' THEN
SET
	v_old_value = (
SELECT
	COALESCE(SUM(VALUE), 0)
FROM
	debts
WHERE
	user_ID = p_user_id
	AND DATE BETWEEN p_start_date AND p_end_date);

ELSEIF p_updated_item_type = 'Saving' THEN
SET
	v_old_value = (
SELECT
	COALESCE(SUM(VALUE), 0)
FROM
	savings
WHERE
	user_ID = p_user_id
	AND DATE BETWEEN p_start_date AND p_end_date);
ELSE
SET
	v_old_value = 0;
END IF;

SELECT
	CONCAT('Item type:', p_updated_item_type);

SELECT
	CONCAT('Item total value:', v_old_value);


SELECT
	COALESCE(SUM(VALUE), 0)
INTO
	v_total_incomes
FROM
	incomes
WHERE
	user_ID = p_user_id
	AND DATE BETWEEN p_start_date AND p_end_date;

SELECT
	CONCAT('Total incomes:', v_total_incomes);


SELECT
	COALESCE(SUM(VALUE), 0) 
INTO
	v_total_expenses
FROM
	expenses
WHERE
	user_ID = p_user_id
	AND DATE BETWEEN p_start_date AND p_end_date;

SELECT
	CONCAT('Total expenses:', v_total_expenses);


SELECT
	COALESCE(SUM(VALUE), 0) 
INTO
	v_total_debts
FROM
	debts
WHERE
	user_ID = p_user_id
	AND DATE BETWEEN p_start_date AND p_end_date;

SELECT
	CONCAT('Total debts:', v_total_debts);


SELECT
	COALESCE(SUM(VALUE), 0) 
INTO
	v_total_savings
FROM
	savings
WHERE
	user_ID = p_user_id
	AND DATE BETWEEN p_start_date AND p_end_date;

SELECT
	CONCAT('Total savings:', v_total_savings);


SET
v_remaining_amount = v_total_incomes - (v_total_expenses + v_total_debts + v_total_savings);

SELECT
	CONCAT('Remaining amount:', v_remaining_amount);


SET
v_difference = p_new_value - v_old_value;

SELECT
	CONCAT('Difference:', v_difference);


IF v_difference > 0 THEN
	IF v_remaining_amount >= v_difference THEN
    	SET
			p_result = 1;
ELSE
    	SET
			p_result = 0;
END IF;
ELSE
	SET
		p_result = 1;
END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `create_account_balance_record_on_transfer` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'IGNORE_SPACE,NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `create_account_balance_record_on_transfer`(IN `p_user_ID` INT(20), IN `p_account_ID` INT(20), IN `p_record_value` INT(50), IN `p_record_date` DATE, OUT `p_execution_result` TINYINT(1))
    NO SQL
BEGIN


DECLARE v_account_type VARCHAR(50) DEFAULT NULL;

DECLARE v_has_balance_record_specified_month TINYINT(1) DEFAULT 0;

DECLARE v_record_name VARCHAR(50) DEFAULT NULL;

SELECT
	get_account_type(p_account_ID)
INTO
	v_account_type
FROM
	DUAL;





SET
v_record_name = CONCAT('balance_record_', p_record_date);


IF v_account_type LIKE '%SYSTEM_DEFINED%' THEN
		CALL create_saving_account_balance_record(p_user_ID,
p_account_ID,
v_record_name,
p_record_value,
MONTH(p_record_date),
YEAR(p_record_date),
p_execution_result);

ELSEIF v_account_type LIKE '%USER_DEFINED%' THEN
       CALL create_external_account_balance_record(p_account_ID,
v_record_name,
p_record_value,
p_record_date,
NULL,
p_execution_result);
END IF;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `create_saving_account_balance_record` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'IGNORE_SPACE,NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `create_saving_account_balance_record`(IN `p_user_ID` INT(10), IN `p_saving_account_ID` INT(10), IN `p_balance_record_name` VARCHAR(50), IN `p_balance_record_value` INT(10), IN `p_month` INT(2), IN `p_year` INT(4), OUT `p_execution_result` TINYINT(1))
BEGIN


DECLARE v_inserted_rows INT DEFAULT 0;

INSERT
	INTO
	saving_accounts_balance(user_ID,
	account_ID,
	recordName,
	value,
	MONTH,
	YEAR)
VALUES(p_user_ID,
p_saving_account_ID,
p_balance_record_name,
p_balance_record_value,
p_month,
p_year);

SET
v_inserted_rows = ROW_COUNT();

IF v_inserted_rows = 1 THEN
SET
	p_execution_result = 1;

ELSE
SET
	p_execution_result = 0;

END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_new_receivable_status` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'IGNORE_SPACE,NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `get_new_receivable_status`(IN `p_receivable_ID` INT(20), OUT `p_new_receivable_status` VARCHAR(50))
    NO SQL
proc_label:BEGIN


DECLARE v_receivable_value INT(20);

DECLARE v_partial_payments_value INT(20);

DECLARE v_amount_left INT(20);

DECLARE v_receivable_due_date DATE;

DECLARE v_new_status VARCHAR(50);

DECLARE v_old_status VARCHAR(50);


SELECT
	dueDate
INTO
	v_receivable_due_date
FROM
	receivables
WHERE
	receivableID = p_receivable_ID;


IF(v_receivable_due_date < CURDATE()) THEN
	SET
p_new_receivable_status = 'Overdue';

LEAVE proc_label;
END IF;


SELECT
	rcs.value,
	COALESCE(SUM(pps.paymentValue), 0),
	rs.statusDescription 
INTO
	v_receivable_value,
	v_partial_payments_value,
	v_old_status
FROM
	receivables rcs
INNER JOIN partial_payments pps ON
	rcs.receivableID = pps.receivable_ID
INNER JOIN receivable_status rs ON
	rcs.status_ID = rs.statusID
WHERE
	rcs.receivableID = p_receivable_ID;

SET
v_amount_left = v_receivable_value - v_partial_payments_value;

IF(v_amount_left = v_receivable_value) THEN
	
    SET
		p_new_receivable_status = 'New';

ELSEIF(v_amount_left > 0
	AND v_amount_left < v_receivable_value) THEN
	
    SET
		p_new_receivable_status = 'Partially paid';

ELSEIF(v_amount_left = 0) THEN
	
    SET
		p_new_receivable_status = 'Paid';
END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_saving_account_balance` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'IGNORE_SPACE,NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `get_saving_account_balance`(IN `p_account_ID` INT(20), OUT `p_account_balance` DOUBLE)
    NO SQL
BEGIN


DECLARE v_account_type VARCHAR(50) DEFAULT NULL;

DECLARE v_user_ID INT DEFAULT 0;

DECLARE v_total_credit DOUBLE DEFAULT 0;

DECLARE v_total_debit DOUBLE DEFAULT 0;

DECLARE v_total_transfers_in INT DEFAULT 0;

DECLARE v_total_transfers_out INT DEFAULT 0;

DECLARE v_total_interest_amount DOUBLE DEFAULT 0;

DECLARE v_total_savings INT DEFAULT 0;

DECLARE v_total_saving_account_expenses INT DEFAULT 0;

DECLARE v_account_balance DOUBLE DEFAULT 0;

DECLARE v_total_unpaid_receivable_amount INT(20) DEFAULT 0;


SELECT
	sat.typeName,

	sa.user_ID
INTO
	v_account_type,

	v_user_ID
FROM
	saving_accounts sa
INNER JOIN saving_account_types sat ON
	sa.type_ID = sat.typeID
WHERE
	sa.accountID = p_account_ID;

SELECT
	(CONCAT('ACCOUNT TYPE: ', v_account_type));

SELECT
	(CONCAT('USER ID: ', v_user_ID));


SELECT
	COALESCE(SUM(receivedValue), 0)
INTO
	v_total_transfers_in
FROM
	saving_accounts_transfers
WHERE
	receivingAccountID = p_account_ID;

SELECT
	(CONCAT('TOTAL IN TRANSFERS: ', v_total_transfers_in));


SELECT
	COALESCE(SUM(sentValue), 0)
INTO
	v_total_transfers_out
FROM
	saving_accounts_transfers
WHERE
	senderAccountID = p_account_ID;

SELECT
	(CONCAT('TOTAL OUT TRANSFERS: ', v_total_transfers_out));


SELECT
	COALESCE(SUM(value), 0)
INTO
	v_total_interest_amount
FROM
	saving_accounts_interest
WHERE
	account_ID = p_account_ID;

SELECT

	(CONCAT('TOTAL INTEREST AMOUNT: ', v_total_interest_amount));


SELECT
	COALESCE(SUM(value), 0)
INTO
	v_total_saving_account_expenses
FROM
	saving_accounts_expenses
WHERE
	account_ID = p_account_ID;

SELECT
	(CONCAT('TOTAL SAVING ACCOUNT EXPENSES: ', v_total_saving_account_expenses));


IF v_account_type = 'SYSTEM_DEFINED-DEFAULT_SAVING_ACCOUNT' THEN

SELECT
	COALESCE(SUM(value), 0) 
INTO
	v_total_savings
FROM
	savings
WHERE
	user_ID = v_user_ID;

SELECT
	(CONCAT('TOTAL SAVINGS: ', v_total_savings));


SELECT
	COALESCE(SUM(value - totalPaidAmount), 0)
INTO
	v_total_unpaid_receivable_amount
FROM
	receivables
WHERE
	account_ID = p_account_id;

SELECT
	(CONCAT('TOTAL UNPAID RECEIVABLE AMOUNT: ', v_total_unpaid_receivable_amount));


SET
v_total_credit = v_total_transfers_in + v_total_savings;


SET
v_total_debit = v_total_transfers_out + v_total_saving_account_expenses + v_total_unpaid_receivable_amount;


SET
v_account_balance = v_total_credit - v_total_debit;

SELECT
	(CONCAT('ACCOUNT BALANCE FOR DEFAULT SAVING ACCOUNT: ', v_account_balance));

ELSEIF v_account_type = 'USER_DEFINED-CUSTOM_SAVING_ACCOUNT' THEN
SET
	v_total_credit = v_total_transfers_in + v_total_interest_amount;

SET
	v_total_debit = v_total_transfers_out + v_total_saving_account_expenses;

SET
	v_account_balance = v_total_credit - v_total_debit;

SELECT
	(CONCAT('ACCOUNT BALANCE FOR CUSTOM SAVING ACCOUNT: ', v_account_balance));
END IF;

SET
p_account_balance = v_account_balance;

SELECT
	(CONCAT('OUTPUT VARIABLE VALUE: ', p_account_balance));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `has_balance_record_for_selected_month` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'IGNORE_SPACE,NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `has_balance_record_for_selected_month`(IN `p_account_ID` INT, IN `p_balance_record_month` INT, IN `p_balance_record_year` INT, OUT `p_exists` TINYINT)
BEGIN 

	
DECLARE v_count INT DEFAULT 0;

DECLARE v_account_type VARCHAR(50) DEFAULT NULL;

SELECT
	get_account_type(p_account_id) 
INTO
	v_account_type
FROM
	DUAL;


IF v_account_type LIKE '%SYSTEM_DEFINED%' THEN
	SELECT
	COUNT(*) 
	INTO
	v_count
FROM
	saving_accounts_balance
WHERE
	account_ID = p_account_ID
	AND MONTH = p_balance_record_month
	AND YEAR = p_balance_record_year;

ELSEIF v_account_type LIKE '%USER_DEFINED%' THEN
	SELECT
	COUNT(*) 
	INTO
	v_count
FROM
	external_accounts_balance
WHERE
	account_ID = p_account_ID
	AND MONTH(createdDate) = p_balance_record_month
	AND YEAR(createdDate)= p_balance_record_year;
ELSE

	SET
		v_count = 0;
END IF;

IF v_count > 0 THEN 
	SET
		p_exists = 1;
ELSE 
	SET
		p_exists = 0;
END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `log_receivable_history` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'IGNORE_SPACE,NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `log_receivable_history`(IN p_receivable_ID INT(20), OUT p_execution_result TINYINT(1))
BEGIN

DECLARE v_receivable_ID INT(20);

DECLARE v_receivable_name VARCHAR(50);

DECLARE v_receivable_value INT(20);

DECLARE v_total_paid_amount INT(20);

DECLARE v_status VARCHAR(50);

DECLARE v_debtor_ID INT(20);

DECLARE v_account_ID INT(20);

DECLARE v_created_date DATE;

DECLARE v_due_date DATE;

DECLARE v_performed_action VARCHAR(50);


SELECT
	rc.receivableID,
	rc.name,
	rc.value,
	rc.totalPaidAmount,
	rcs.statusDescription,
	rc.debtor_ID,
	rc.account_ID,
	rc.createdDate,
	rc.dueDate
	INTO
	v_receivable_ID,
	v_receivable_name,
	v_receivable_value,
	v_total_paid_amount,
	v_status,
	v_debtor_ID,
	v_account_ID,
	v_created_date,
	v_due_date
FROM
	receivables rc
INNER JOIN receivable_status rcs ON
	rc.status_ID = rcs.statusID
WHERE
	rc.receivableID = p_receivable_ID;


SELECT
	get_action_performed_on_receivable(p_receivable_ID)
INTO
	v_performed_action;


INSERT
	INTO
	receivable_history(
	receivable_ID,
	name,
	value,
	totalPaidAmount,
	status,
	debtor_ID,
	account_ID,
	createdDate,
	dueDate,
	performedAction,
	histTimestamp)
VALUES(v_receivable_ID,
v_receivable_name,
v_receivable_value,
v_total_paid_amount,
v_status,
v_debtor_ID,
v_account_ID,
v_created_date,
v_due_date,
v_performed_action,
CURRENT_TIMESTAMP());


IF ROW_COUNT() > 0 THEN
SET
	p_execution_result = 1;
ELSE
SET
	p_execution_result = 0;
END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `mark_overdue_receivables` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'IGNORE_SPACE,NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `mark_overdue_receivables`()
    NO SQL
BEGIN


DECLARE v_receivable_id INT(20);

DECLARE v_finished TINYINT(1);


DECLARE receivable_cursor 

	CURSOR FOR 

SELECT
	receivableID
FROM
	receivables
WHERE
	dueDate < CURDATE()
ORDER BY
	dueDate;


DECLARE CONTINUE HANDLER FOR NOT FOUND SET
v_finished = 1;

OPEN receivable_cursor;

setOverdueReceivable:LOOP

	FETCH receivable_cursor
INTO
	v_receivable_id;

IF v_finished = 1 THEN

    	LEAVE setOverdueReceivable;
END IF;


UPDATE
	receivables rc
INNER JOIN receivable_status rcs ON
	rc.status_ID = rcs.statusID
SET
		rc.status_ID = (
	SELECT
		statusID
	FROM
		receivable_status
	WHERE
		statusDescription = 'Overdue')
WHERE
	rc.receivableID = v_receivable_id
	AND rcs.statusDescription != 'Paid';

END LOOP setOverdueReceivable;

CLOSE receivable_cursor;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `set_receivable_status` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'IGNORE_SPACE,NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `set_receivable_status`(IN `p_receivable_ID` INT(20))
    NO SQL
proc_label:BEGIN



DECLARE v_receivable_value INT(20);

DECLARE v_partial_payments_value INT(20);

DECLARE v_amount_left INT(20);

DECLARE v_receivable_due_date DATE;

DECLARE v_new_status VARCHAR(50);

DECLARE v_old_status VARCHAR(50);


SELECT
	dueDate
INTO
	v_receivable_due_date
FROM
	receivables
WHERE
	receivableID = p_receivable_ID;


IF(v_receivable_due_date < CURDATE()) THEN
	UPDATE
	receivables
SET
	status_ID = (
	SELECT
		statusID
	FROM
		receivable_status
	WHERE
		statusDescription = 'Overdue')
WHERE
	receivableID = p_receivable_ID;

SELECT
	'RECEIVABLE STATUS SET TO OVERDUE' AS 'Performed action';

LEAVE proc_label;
END IF;


SELECT
	rcs.value,
	COALESCE(SUM(pps.paymentValue), 0),
	rs.statusDescription 
INTO
	v_receivable_value,
	v_partial_payments_value,
	v_old_status
FROM
	receivables rcs
INNER JOIN partial_payments pps ON
	rcs.receivableID = pps.receivable_ID
INNER JOIN receivable_status rs ON
	rcs.status_ID = rs.statusID
WHERE
	rcs.receivableID = p_receivable_ID;

SET
v_amount_left = v_receivable_value - v_partial_payments_value;

IF(v_amount_left = v_receivable_value) THEN
	
    SET
		v_new_status = 'New';

ELSEIF(v_amount_left > 0
	AND v_amount_left < v_receivable_value) THEN
	
    SET
		v_new_status = 'Partially paid';

ELSEIF(v_amount_left = 0) THEN
	
    SET
		v_new_status = 'Paid';
END IF;


IF(v_old_status != v_new_status) THEN
UPDATE
	receivables
SET
	status_ID = (
	SELECT
		statusID
	FROM
		receivable_status
	WHERE
		statusDescription = v_new_status)
WHERE
	receivableID = p_receivable_ID;

SELECT
	CONCAT('STATUS UPDATE WAS PERFORMED', ' (OLD STATUS: ', v_old_status, '; NEW STATUS: ', v_new_status, ')') AS 'Performed action';
ELSE 

SELECT
	CONCAT('NO STATUS UPDATE IS NECESSARY!', ' (OLD STATUS: ', v_old_status, '; NEW STATUS: ', v_new_status, ')') AS 'Performed action';
END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_account_balance_on_transfer` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'IGNORE_SPACE,NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `update_account_balance_on_transfer`(IN `p_account_ID` INT(20), IN `p_transfer_value` INT(20), IN `p_transfer_date` DATE, IN `p_account_role` VARCHAR(50), OUT `p_execution_result` TINYINT(1))
    NO SQL
BEGIN


DECLARE v_account_type VARCHAR(50) DEFAULT NULL;

DECLARE v_record_name VARCHAR(50) DEFAULT NULL;

DECLARE v_current_value INT DEFAULT 0;

DECLARE v_new_value INT DEFAULT 0;

DECLARE v_inserted_rows INT DEFAULT 0;


SELECT
	get_account_type(p_account_ID)
INTO
	v_account_type
FROM
	DUAL;



IF v_account_type LIKE '%SYSTEM_DEFINED%' THEN




SELECT
	get_balance_record_value(p_account_ID,
	p_transfer_date)
INTO
	v_current_value
FROM
	DUAL;


SET
v_record_name = CONCAT('balance_record_', CURDATE());


IF p_account_role = 'SENDER' THEN
SET
v_new_value = v_current_value - p_transfer_value;

ELSEIF p_account_role = 'RECEIVER' THEN
SET
v_new_value = v_current_value + p_transfer_value;
END IF;


UPDATE
	saving_accounts_balance
SET
	value = v_new_value,
	recordName = v_record_name
WHERE
	account_ID = p_account_ID
	AND MONTH = MONTH(p_transfer_date)
	AND YEAR = YEAR(p_transfer_date);


SET
v_inserted_rows = ROW_COUNT();

END IF;


IF v_account_type LIKE '%USER_DEFINED%' THEN





SELECT
	get_balance_record_value(p_account_ID,
	p_transfer_date)
INTO
	v_current_value
FROM
	DUAL;


IF p_account_role = 'SENDER' THEN
SET
v_new_value = v_current_value - p_transfer_value;

ELSEIF p_account_role = 'RECEIVER' THEN
SET
v_new_value = v_current_value + p_transfer_value;

END IF;


UPDATE
	external_accounts_balance
SET
	value = v_new_value,
	lastUpdatedDate = CURDATE()
WHERE
	account_ID = p_account_ID
	AND MONTH(createdDate) = MONTH(p_transfer_date)
	AND YEAR(createdDate) = YEAR(p_transfer_date);


SET
v_inserted_rows = ROW_COUNT();
END IF;


IF v_inserted_rows = 1 THEN
SET
	p_execution_result = 1;
ELSE
SET
	p_execution_result = 0;
END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_account_balance_on_transfer_delete` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'IGNORE_SPACE,NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `update_account_balance_on_transfer_delete`(IN `p_sender_account_ID` INT(20), IN `p_receiving_account_ID` INT(20), IN `p_sent_value` INT(20), IN `p_received_value` INT(20), IN `p_transfer_date` DATE, OUT `p_sender_update_result` TINYINT(1),
OUT `p_receiver_update_result` TINYINT(1))
    NO SQL
BEGIN


DECLARE v_sender_account_type VARCHAR(20) DEFAULT NULL;

DECLARE v_receiving_account_type VARCHAR(20) DEFAULT NULL;

DECLARE v_sender_account_current_record_value INT DEFAULT 0;

DECLARE v_receiving_account_current_record_value INT DEFAULT 0;

DECLARE v_sender_account_new_record_value INT DEFAULT 0;

DECLARE v_receiving_account_new_record_value INT DEFAULT 0;

DECLARE v_saving_accounts_balance_record_name VARCHAR(50) DEFAULT NULL;


SELECT
	get_account_type(p_sender_account_ID)
INTO
	v_sender_account_type
FROM
	DUAL;


SELECT
	get_account_type(p_receiving_account_ID)
INTO
	v_receiving_account_type
FROM
	DUAL;


SELECT
	get_balance_record_value(p_sender_account_ID,
	p_transfer_date)
INTO
	v_sender_account_current_record_value
FROM
	DUAL;

SELECT
	get_balance_record_value(p_receiving_account_ID,
	p_transfer_date)
INTO
	v_receiving_account_current_record_value
FROM
	DUAL;


SET
v_sender_account_new_record_value = v_sender_account_current_record_value + p_sent_value;


SET
v_receiving_account_new_record_value = v_receiving_account_current_record_value - p_received_value;


SET
v_saving_accounts_balance_record_name = CONCAT('balance_record_', p_transfer_date);


IF v_sender_account_type LIKE '%SYSTEM_DEFINED%' THEN
UPDATE
	saving_accounts_balance
SET
	value = v_sender_account_new_record_value,
	recordName = v_saving_accounts_balance_record_name
WHERE
	account_ID = p_sender_account_ID
	AND MONTH = MONTH(p_transfer_date)
	AND YEAR = YEAR(p_transfer_date);


SET
p_sender_update_result = ROW_COUNT();

ELSEIF v_sender_account_type LIKE '%USER_DEFINED%' THEN
UPDATE
	external_accounts_balance
SET
	value = v_sender_account_new_record_value,
	lastUpdatedDate = CURDATE()
WHERE
	account_ID = p_sender_account_ID
	AND MONTH(createdDate) = MONTH(p_transfer_date)
	AND YEAR(createdDate) = YEAR(p_transfer_date);

SET
p_sender_update_result = ROW_COUNT();
END IF;


IF v_receiving_account_type LIKE '%SYSTEM_DEFINED%' THEN
UPDATE
	saving_accounts_balance
SET
	value = v_receiving_account_new_record_value,
	recordName = v_saving_accounts_balance_record_name
WHERE
	account_ID = p_receiving_account_ID
	AND MONTH = MONTH(p_transfer_date)
	AND YEAR = YEAR(p_transfer_date);


SET
p_receiver_update_result = ROW_COUNT();

ELSEIF v_receiving_account_type LIKE '%USER_DEFINED%' THEN
UPDATE
	external_accounts_balance
SET
	value = v_receiving_account_new_record_value,
	lastUpdatedDate = CURDATE()
WHERE
	account_ID = p_receiving_account_ID
	AND MONTH(createdDate) = MONTH(p_transfer_date)
	AND YEAR(createdDate) = YEAR(p_transfer_date);

SET
p_receiver_update_result = ROW_COUNT();
END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_balance_record_on_transfer_update` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'IGNORE_SPACE,NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `update_balance_record_on_transfer_update`(IN `p_sender_account_ID` INT(20), IN `p_receiving_account_ID` INT(20), IN `p_new_sent_value` INT(20), IN `p_old_sent_value` INT(20), IN `p_new_received_value` INT(20), IN `p_old_received_value` INT(20), IN `p_transfer_date` DATE, OUT `p_sender_update_result` TINYINT(1),
OUT `p_receiver_update_result` TINYINT(1))
    NO SQL
BEGIN


DECLARE v_sender_account_type VARCHAR(20) DEFAULT NULL;

DECLARE v_receiving_account_type VARCHAR(20) DEFAULT NULL;

DECLARE v_sent_value_diff INT DEFAULT 0;

DECLARE v_received_value_diff INT DEFAULT 0;

DECLARE v_sender_account_current_record_value INT DEFAULT 0;

DECLARE v_receiving_account_current_record_value INT DEFAULT 0;

DECLARE v_sender_account_new_record_value INT DEFAULT 0;

DECLARE v_receiving_account_new_record_value INT DEFAULT 0;

DECLARE v_saving_accounts_balance_record_name VARCHAR(50) DEFAULT NULL;


SELECT
	get_account_type(p_sender_account_ID)
INTO
	v_sender_account_type
FROM
	DUAL;


SELECT
	get_account_type(p_receiving_account_ID)
INTO
	v_receiving_account_type
FROM
	DUAL;





SELECT
	get_balance_record_value(p_sender_account_ID,
	p_transfer_date)
INTO
	v_sender_account_current_record_value
FROM
	DUAL;

SELECT
	get_balance_record_value(p_receiving_account_ID,
	p_transfer_date)
INTO
	v_receiving_account_current_record_value
FROM
	DUAL;


SET
v_sent_value_diff = p_new_sent_value - p_old_sent_value;

SET
v_received_value_diff = p_new_received_value - p_old_received_value;


IF v_sent_value_diff >= 0 THEN
SET
	v_sender_account_new_record_value = v_sender_account_current_record_value - v_sent_value_diff;

ELSE
SET
	v_sender_account_new_record_value = v_sender_account_current_record_value + ABS(v_sent_value_diff);

END IF;




IF v_received_value_diff >= 0 THEN
SET
	v_receiving_account_new_record_value = v_receiving_account_current_record_value + v_received_value_diff;

ELSE 
SET
	v_receiving_account_new_record_value = v_receiving_account_current_record_value - ABS(v_received_value_diff);

END IF;



SET
v_saving_accounts_balance_record_name = CONCAT('balance_record_', p_transfer_date);


IF v_sender_account_type LIKE '%SYSTEM_DEFINED%' THEN
UPDATE
	saving_accounts_balance
SET
	value = v_sender_account_new_record_value,
	recordName = v_saving_accounts_balance_record_name
WHERE
	account_ID = p_sender_account_ID
	AND MONTH = MONTH(p_transfer_date)
	AND YEAR = YEAR(p_transfer_date);


SET
	p_sender_update_result = ROW_COUNT();

ELSEIF v_sender_account_type LIKE '%USER_DEFINED%' THEN
UPDATE
	external_accounts_balance
SET
	value = v_sender_account_new_record_value,
	lastUpdatedDate = CURDATE()
WHERE
	account_ID = p_sender_account_ID
	AND MONTH(createdDate) = MONTH(p_transfer_date)
	AND YEAR(createdDate) = YEAR(p_transfer_date);

SET
	p_sender_update_result = ROW_COUNT();

END IF;


IF v_receiving_account_type LIKE '%SYSTEM_DEFINED%' THEN
UPDATE
	saving_accounts_balance
SET
	value = v_receiving_account_new_record_value,
	recordName = v_saving_accounts_balance_record_name
WHERE
	account_ID = p_receiving_account_ID
	AND MONTH = MONTH(p_transfer_date)
	AND YEAR = YEAR(p_transfer_date);


SET
	p_receiver_update_result = ROW_COUNT();

ELSEIF v_receiving_account_type LIKE '%USER_DEFINED%' THEN
UPDATE
	external_accounts_balance
SET
	value = v_receiving_account_new_record_value,
	lastUpdatedDate = CURDATE()
WHERE
	account_ID = p_receiving_account_ID
	AND MONTH(createdDate) = MONTH(p_transfer_date)
	AND YEAR(createdDate) = YEAR(p_transfer_date);

SET
	p_receiver_update_result = ROW_COUNT();

END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2023-05-06 21:24:22
